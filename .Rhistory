ll = c()
for(i in 1:length(species_list)){
t = paste(species_list[i], "[Organism] AND MGD1[Gene]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 2)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
i
species_list = c( "Crassostrea virginica",
"Arctica islandica", "Tridacna gigas",
"Conus ermineus", "Lingula anatina")
ll = c()
for(i in 1:length(species_list)){
t = paste(species_list[i], "[Organism] AND MGD1[Gene]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 2)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
species_list = c( "Crassostrea virginica",
"Arctica islandica", "Tridacna gigas",
"Conus ermineus", "Lingula anatina")
ll = c()
for(i in 1:length(species_list)){
t = paste(species_list[i], "[Organism] AND COI[Gene]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 2)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
write(ll, "mussels_COI.fasta", sep="\n")
mussels_COI_seqinr_format <- read.fasta("mussels_COI.fasta")
musselSeq <- readAAStringSet("mussels_COI.fasta")
musselAln <- msa(musselSeq)
## use default substitution matrix
musselAln
musselAln2 <- msaConvert(musselAln, type="seqinr::alignment")
d <- dist.alignment(musselAln2, "identity")
musselTree <- nj(d)
df = data.frame(color=sample(c('red', 'blue', 'green'),
length(musselTree$tip.label), replace=T))
rownames(df) = musselTree$tip.label
#musselTree = phylo4d(as(musselTree, 'phylo4'), df)
for(i in 1:length(musselTree$tip.label)){
musselTree$tip.label[i] = paste(strsplit(musselTree$tip.label, " ")[[i]][2:3], collapse = " ")
}
plot(musselTree, main="Phylogenetic Tree Based on Mollusk COI Sequences", cex = 0.8)
#musselTree = groupOTU(musselTree, musselTree$tip.label)
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")
tree <- groupClade(musselTree, .node = c(13,14,15,19,20))
p = ggtree(tree, aes(color=group, linetype=group)) +
ggtitle("Phylogenetic Tree Based on Mollusk COI Sequences") +
#geom_text(aes(label = node)) + # run this line to identify nodes to rotate
geom_tiplab(aes(subset=(group==1))) +
geom_tiplab(aes(subset=(group==2))) +
geom_tiplab(aes(subset=(group==3))) +
geom_tiplab(aes(subset=(group==4))) +
geom_tiplab(aes(subset=(group==5))) +
ggplot2::xlim(0, 1.5) +
scale_color_manual(labels = c("Uniodae1", "Unioda", "Uniodae2", "Other Mollusks", "Invertebrate Outgroup"),
values = c("black", "purple", "navy", "magenta", "darkorange") ) +
guides(color = guide_legend(override.aes = list(linetype = c('solid','solid', 'solid', 'solid', "solid"))),
linetype = FALSE)
p
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none") +
tree <- groupClade(musselTree, .node = c(13,14,15,19,20))
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none") +
tree <- groupClade(musselTree, .node = c(13,14,15,19,20))
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none") +
coord_flip() +
tree <- groupClade(musselTree, .node = c(13,14,15,19,20))
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none") +
coord_flip()
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none") +
coord_flip() + ggplot2::xlim(0, 20)
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none") +
coord_flip() + ggplot2::xlim(0, 10)
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none") +
coord_flip() + ggplot2::xlim(0, 2)
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none") +
coord_flip() + ggplot2::xlim(0, 6)
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=0)) + theme(legend.position="none") +
coord_flip() + ggplot2::xlim(0, 6)
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=90)) + theme(legend.position="none") +
coord_flip() + ggplot2::xlim(0, 6)
###############################
# Bivalve Phylogenetic Tree
# 5/28/2020
# Alex Van Plantinga
library("rentrez")
library("Biostrings")
library("GenomicRanges")
library("clusterProfiler")
library("DOSE")
library("org.Hs.eg.db")
library("treeio")
library("ape")
library("Biostrings")
library("ggplot2")
library("ggtree")
library("msa")
library("seqinr")
library("phylobase")
species_list = c("Amblema plicata", "Cyrtonaias tampicoensis",
"Lampsilis cardium", "Margaritifera margaritifera",
"Ellipsaria lineolata", "Elliptio complanata",
"Megalonaias nervosa", "Crassostrea virginica",
"Arctica islandica", "Tridacna gigas",
"Conus ermineus", "Lingula anatina")
ll = c()
for(i in 1:length(species_list)){
t = paste(species_list[i], "[Organism] AND MGD1[Gene]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 2)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
write(ll, "mussels_COI.fasta", sep="\n")
mussels_COI_seqinr_format <- read.fasta("mussels_COI.fasta")
musselSeq <- readAAStringSet("mussels_COI.fasta")
musselAln <- msa(musselSeq)
## use default substitution matrix
musselAln
musselAln2 <- msaConvert(musselAln, type="seqinr::alignment")
d <- dist.alignment(musselAln2, "identity")
musselTree <- nj(d)
df = data.frame(color=sample(c('red', 'blue', 'green'),
length(musselTree$tip.label), replace=T))
rownames(df) = musselTree$tip.label
#musselTree = phylo4d(as(musselTree, 'phylo4'), df)
for(i in 1:length(musselTree$tip.label)){
musselTree$tip.label[i] = paste(strsplit(musselTree$tip.label, " ")[[i]][2:3], collapse = " ")
}
plot(musselTree, main="Phylogenetic Tree Based on Mollusk COI Sequences", cex = 0.8)
#musselTree = groupOTU(musselTree, musselTree$tip.label)
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=90)) + theme(legend.position="none") +
coord_flip() + ggplot2::xlim(0, 6)
species_list = c("Amblema plicata", "Cyrtonaias tampicoensis",
"Lampsilis cardium", "Margaritifera margaritifera",
"Ellipsaria lineolata", "Elliptio complanata",
"Megalonaias nervosa", "Crassostrea virginica",
"Arctica islandica", "Tridacna gigas",
"Conus ermineus", "Lingula anatina")
ll = c()
for(i in 1:length(species_list)){
t = paste(species_list[i], "[Organism] AND MGD1[Gene]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 2)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
species_list = c("Amblema plicata", "Cyrtonaias tampicoensis",
"Lampsilis cardium", "Margaritifera margaritifera",
"Ellipsaria lineolata", "Elliptio complanata",
"Megalonaias nervosa", "Crassostrea virginica",
"Arctica islandica", "Tridacna gigas",
"Conus ermineus", "Lingula anatina")
ll = c()
for(i in 1:length(species_list)){
t = paste(species_list[i], "[Organism] AND COI[Gene]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 1)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
write(ll, "mussels_COI.fasta", sep="\n")
mussels_COI_seqinr_format <- read.fasta("mussels_COI.fasta")
musselSeq <- readAAStringSet("mussels_COI.fasta")
musselAln <- msa(musselSeq)
## use default substitution matrix
musselAln
musselAln2 <- msaConvert(musselAln, type="seqinr::alignment")
d <- dist.alignment(musselAln2, "identity")
musselTree <- nj(d)
df = data.frame(color=sample(c('red', 'blue', 'green'),
length(musselTree$tip.label), replace=T))
rownames(df) = musselTree$tip.label
#musselTree = phylo4d(as(musselTree, 'phylo4'), df)
for(i in 1:length(musselTree$tip.label)){
musselTree$tip.label[i] = paste(strsplit(musselTree$tip.label, " ")[[i]][2:3], collapse = " ")
}
plot(musselTree, main="Phylogenetic Tree Based on Mollusk COI Sequences", cex = 0.8)
#musselTree = groupOTU(musselTree, musselTree$tip.label)
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=90)) + theme(legend.position="none") +
coord_flip() + ggplot2::xlim(0, 6)
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=90)) + theme(legend.position="none") +
coord_flip() + ggplot2::xlim(0, 3)
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=90)) + theme(legend.position="none") +
coord_flip() + ggplot2::xlim(0, 10)
plot(musselTree, main="Phylogenetic Tree Based on Mollusk COI Sequences", cex = 0.8)
plot.phylo(musselTree, type="unrooted", cex=0.6, tip.color=tipcolor,
rotate.tree=140)
plot.phylo(musselTree, type="unrooted", cex=3, tip.color=tipcolor,
rotate.tree=140)
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=90)) + theme(legend.position="none") +
coord_flip() + ggplot2::xlim(0, 10)
musselTree$tip.label
plot.phylo(musselTree, type="unrooted", cex=3, tip.color=tipcolor,
rotate.tree=140, lab4ut = musselTree$tip.label)
plot.phylo(musselTree, type="unrooted", cex=3, tip.color=tipcolor,
rotate.tree=140, show.tip.label = TRUE)
plot.phylo(musselTree, type="unrooted", cex=3,
rotate.tree=140, show.tip.label = TRUE)
source('C:/Users/Lenovo/BioconductorAnimals/bivalvetree.R', echo=TRUE)
plot.phylo(musselTree, type="unrooted")
plot.phylo(musselTree, type="unrooted", cex = 0.5)
ll = c()
for(i in 1:length(species_list)){
t = paste(species_list[i], "[Organism] AND CA2[Gene]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 1)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
ll = c()
for(i in 1:length(species_list)){
t = paste(species_list[i], "[Organism] AND CA2[RNA]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 1)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
ll = c()
for(i in 1:length(species_list)){
t = paste(species_list[i], "[Organism] AND CA2[Protein]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 1)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
ll = c()
for(i in 1:length(species_list)){
t = paste(species_list[i], "[Organism] AND RAG1[Gene]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 1)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
i
ll = c()
for(i in 1:length(species_list)){
t = paste(species_list[i], "[Organism] AND COX1[Gene]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 1)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
i
i = 3
for(i in 3:length(species_list)){
t = paste(species_list[i], "[Organism] AND COX1[Gene]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 1)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
i
for(i in 8:length(species_list)){
t = paste(species_list[i], "[Organism] AND COX1[Gene]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 1)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
write(ll, "mussels_COI.fasta", sep="\n")
mussels_COI_seqinr_format <- read.fasta("mussels_COI.fasta")
musselSeq <- readAAStringSet("mussels_COI.fasta")
musselAln <- msa(musselSeq)
## use default substitution matrix
musselAln
musselAln2 <- msaConvert(musselAln, type="seqinr::alignment")
d <- dist.alignment(musselAln2, "identity")
musselTree <- nj(d)
df = data.frame(color=sample(c('red', 'blue', 'green'),
length(musselTree$tip.label), replace=T))
rownames(df) = musselTree$tip.label
#musselTree = phylo4d(as(musselTree, 'phylo4'), df)
for(i in 1:length(musselTree$tip.label)){
musselTree$tip.label[i] = paste(strsplit(musselTree$tip.label, " ")[[i]][2:3], collapse = " ")
}
plot(musselTree, main="Phylogenetic Tree Based on Mollusk COI Sequences", cex = 0.8)
plot.phylo(musselTree, type="unrooted", cex = 0.5)
#musselTree = groupOTU(musselTree, musselTree$tip.label)
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=90)) + theme(legend.position="none") +
coord_flip() + ggplot2::xlim(0, 10)
ll = c()
for(i in 1:length(species_list)){
t = paste(species_list[i], "[Organism] AND cytb[Gene]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 1)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
write(ll, "mussels_COI.fasta", sep="\n")
mussels_COI_seqinr_format <- read.fasta("mussels_COI.fasta")
musselSeq <- readAAStringSet("mussels_COI.fasta")
musselAln <- msa(musselSeq)
## use default substitution matrix
musselAln
musselAln2 <- msaConvert(musselAln, type="seqinr::alignment")
d <- dist.alignment(musselAln2, "identity")
musselTree <- nj(d)
df = data.frame(color=sample(c('red', 'blue', 'green'),
length(musselTree$tip.label), replace=T))
rownames(df) = musselTree$tip.label
#musselTree = phylo4d(as(musselTree, 'phylo4'), df)
for(i in 1:length(musselTree$tip.label)){
musselTree$tip.label[i] = paste(strsplit(musselTree$tip.label, " ")[[i]][2:3], collapse = " ")
}
plot(musselTree, main="Phylogenetic Tree Based on Mollusk COI Sequences", cex = 0.8)
plot.phylo(musselTree, type="unrooted", cex = 0.5)
#musselTree = groupOTU(musselTree, musselTree$tip.label)
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=90)) + theme(legend.position="none") +
coord_flip() + ggplot2::xlim(0, 10)
i
species_list = c("Amblema plicata", "Cyrtonaias tampicoensis",
"Lampsilis cardium", "Margaritifera margaritifera",
"Ellipsaria lineolata", "Elliptio complanata",
"Megalonaias nervosa", "Crassostrea virginica",
"Arctica islandica", "Tridacna gigas",
"Conus ermineus", "Lingula anatina")
ll = c()
for(i in 1:length(species_list)){
t = paste(species_list[i], "[Organism] AND cytb[Gene]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 1)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
write(ll, "mussels_COI.fasta", sep="\n")
mussels_COI_seqinr_format <- read.fasta("mussels_COI.fasta")
i
entrez_search(db = "nuccore", term = "Cyrtonaias tampicoensis[Organism] AND cytb[Gene]", retmax = 1)
entrez_search(db = "nuccore", term = "Cyrtonaias tampicoensis[Organism] AND CYTB[Gene]", retmax = 1)
entrez_search(db = "nuccore", term = "Cyrtonaias tampicoensis[Organism] AND rag1[Gene]", retmax = 1)
entrez_search(db = "nuccore", term = "Cyrtonaias tampicoensis[Organism] AND CYTB[Gene]", retmax = 1)
entrez_search(db = "nuccore", term = "Crassostrea virginica[Organism] AND CYTB[Gene]", retmax = 1)
species_list = c("Amblema plicata", "Cyrtonaias tampicoensis",
"Lampsilis cardium", "Margaritifera margaritifera",
"Ellipsaria lineolata", "Elliptio complanata",
"Megalonaias nervosa", "Crassostrea virginica",
"Arctica islandica", "Tridacna gigas",
"Conus ermineus")
ll = c()
for(i in 1:length(species_list)){
t = paste(species_list[i], "[Organism] AND COI[Gene]", sep = "")
m = entrez_search(db = "nuccore", term = t, retmax = 1)
m = entrez_fetch(db="nuccore", id=m$ids, rettype="fasta")
ll = append(ll, m)
}
write(ll, "mussels_COI.fasta", sep="\n")
mussels_COI_seqinr_format <- read.fasta("mussels_COI.fasta")
musselSeq <- readAAStringSet("mussels_COI.fasta")
musselAln <- msa(musselSeq)
## use default substitution matrix
musselAln
musselAln2 <- msaConvert(musselAln, type="seqinr::alignment")
d <- dist.alignment(musselAln2, "identity")
musselTree <- nj(d)
df = data.frame(color=sample(c('red', 'blue', 'green'),
length(musselTree$tip.label), replace=T))
rownames(df) = musselTree$tip.label
#musselTree = phylo4d(as(musselTree, 'phylo4'), df)
for(i in 1:length(musselTree$tip.label)){
musselTree$tip.label[i] = paste(strsplit(musselTree$tip.label, " ")[[i]][2:3], collapse = " ")
}
plot(musselTree, main="Phylogenetic Tree Based on Mollusk COI Sequences", cex = 0.8)
plot.phylo(musselTree, type="unrooted", cex = 0.5)
#musselTree = groupOTU(musselTree, musselTree$tip.label)
# https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
#ggtree(musselTree,  layout='circular') + geom_tiplab(size=3, aes(angle=angle)) + theme(legend.position="none")+ aes(color=I(color))
ggtree(musselTree,  layout='slanted',  branch.length="none") + geom_tiplab(size=3, aes(angle=90)) + theme(legend.position="none") +
coord_flip() + ggplot2::xlim(0, 10)
tree <- groupClade(musselTree, .node = c(13,14,15,19,20))
p = ggtree(tree, aes(color=group, linetype=group)) +
ggtitle("Phylogenetic Tree Based on Mollusk COI Sequences") +
#geom_text(aes(label = node)) + # run this line to identify nodes to rotate
geom_tiplab(aes(subset=(group==1))) +
geom_tiplab(aes(subset=(group==2))) +
geom_tiplab(aes(subset=(group==3))) +
geom_tiplab(aes(subset=(group==4))) +
geom_tiplab(aes(subset=(group==5))) +
ggplot2::xlim(0, 1.5) +
scale_color_manual(labels = c("Uniodae1", "Unioda", "Uniodae2", "Other Mollusks", "Invertebrate Outgroup"),
values = c("black", "purple", "navy", "magenta", "darkorange") ) +
guides(color = guide_legend(override.aes = list(linetype = c('solid','solid', 'solid', 'solid', "solid"))),
linetype = FALSE)
p
rotate(p, 18)
tree <- groupClade(musselTree, .node = c(12,13,14,18))
p = ggtree(tree, aes(color=group, linetype=group)) +
ggtitle("Phylogenetic Tree Based on Mollusk COI Sequences") +
#geom_text(aes(label = node)) + # run this line to identify nodes to rotate
geom_tiplab(aes(subset=(group==1))) +
geom_tiplab(aes(subset=(group==2))) +
geom_tiplab(aes(subset=(group==3))) +
geom_tiplab(aes(subset=(group==4))) +
geom_tiplab(aes(subset=(group==5))) +
ggplot2::xlim(0, 1.5) +
scale_color_manual(labels = c("Uniodae1", "Unioda", "Uniodae2", "Other Mollusks", "Invertebrate Outgroup"),
values = c("black", "purple", "navy", "magenta", "darkorange") ) +
guides(color = guide_legend(override.aes = list(linetype = c('solid','solid', 'solid', 'solid', "solid"))),
linetype = FALSE)
p
rotate(p, 18)
p = ggtree(tree, aes(color=group, linetype=group)) +
ggtitle("Phylogenetic Tree Based on Mollusk COI Sequences") +
#geom_text(aes(label = node)) + # run this line to identify nodes to rotate
geom_tiplab(aes(subset=(group==1))) +
geom_tiplab(aes(subset=(group==2))) +
geom_tiplab(aes(subset=(group==3))) +
geom_tiplab(aes(subset=(group==4))) +
ggplot2::xlim(0, 1.5) +
scale_color_manual(labels = c("Uniodae1", "Unioda", "Uniodae2", "Other Mollusks", "Invertebrate Outgroup"),
values = c("black", "purple", "navy", "magenta", "darkorange") ) +
guides(color = guide_legend(override.aes = list(linetype = c('solid','solid', 'solid', 'solid', "solid"))),
linetype = FALSE)
p
rotate(p, 18)
p = ggtree(tree, aes(color=group, linetype=group)) +
ggtitle("Phylogenetic Tree Based on Mollusk COI Sequences") +
#geom_text(aes(label = node)) + # run this line to identify nodes to rotate
geom_tiplab(aes(subset=(group==1))) +
geom_tiplab(aes(subset=(group==2))) +
geom_tiplab(aes(subset=(group==3))) +
geom_tiplab(aes(subset=(group==4))) +
ggplot2::xlim(0, 1.5) +
scale_color_manual(labels = c("Uniodae1", "Unioda", "Uniodae2", "Other Mollusks"),
values = c("black", "purple", "navy", "magenta") ) +
guides(color = guide_legend(override.aes = list(linetype = c('solid','solid', 'solid', 'solid'))),
linetype = FALSE)
p
rotate(p, 18)
View(df.crimes)
# Alex Van Plantinga
# March 2018
# The goal here is
# that for each week of 2017, make a new street map of crime
# where streets are color coded for the weekly crime rate
# combine the maps sequentially into a gif.
# Merge block centroids and crime stats from shape files into dfs
# by the BLOCK column (data conserved?)
# Merge streets and blocks by STREETSEGI column (data conserved?)
library(plyr)
library(base)
library("rgdal")
library(lubridate)
library("caTools") # make gifs with write.gif() function or use ImageMagick software
library(purrr) # for mapping over a function
library(magick)
colfunc = colorRampPalette(c("red", "darkorange", "orange", "yellow"))
legend_image <- as.raster(matrix(colfunc(4), ncol=1))
crimes = readOGR("C:\\Users\\Lenovo\\DCcrimeDATA\\DC crime 2017\\Crime_Incidents_in_2017.shp")
streets = readOGR("C:\\Users\\Lenovo\\DCcrimeDATA\\Street_Centerlines\\Street_Centerlines.shp")
blocks = readOGR("C:\\Users\\Lenovo\\DCcrimeDATA\\Block_Centroids\\Block_Centroids.shp")
boundaries = readOGR("C:\\Users\\Lenovo\\DCcrimeDATA\\boundaries\\cb_2016_us_state_500k.shp")
setwd("C:\\Users\\Lenovo\\DC-crime-map-R")
# this new color column gets repopulated with a
# loop depending on monthly crime rate
streets$color  = NA
df.crimes = data.frame(crimes)
df.crimes$week = week(df.crimes$REPORT_DAT)
df.crimes$month = month(df.crimes$REPORT_DAT)
df.streets = data.frame(streets)
df.blocks = data.frame(blocks)
df.blocks$BLOCK = df.blocks$BLOCKNAME
blocks.crimes = merge(df.blocks, df.crimes, "BLOCK")
blocks.crimes.streets = merge(blocks.crimes, streets, "STREETSEGI")
bcs = blocks.crimes.streets
bcs$week = week(bcs$REPORT_DAT)
#collist = c("red", "darkred")
#colfunc<-colorRampPalette(collist)
#streets$color = NA
#streets$color = colfunc(nrow(streets))
#plot(streets, col = streets$color)
mymonths <- c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec")
View(df.crimes)
table(df.crimes$month)
monthdays = c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)
table(df.crimes$month)/monthdays
barplot(table(df.crimes$month)/monthdays)
