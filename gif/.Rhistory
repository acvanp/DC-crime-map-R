library(gRain)
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99),levels=yn)
t.a <- cptable(~tub|asia, values=c(5,95,1,99),levels=yn)
s <- cptable(~smoke, values=c(5,5), levels=yn)
l.s <- cptable(~lung|smoke, values=c(1,9,1,99), levels=yn)
b.s <- cptable(~bronc|smoke, values=c(6,4,3,7), levels=yn)
e.lt <- cptable(~either|lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
x.e <- cptable(~xray|either, values=c(98,2,5,95), levels=yn)
d.be <- cptable(~dysp|bronc:either, values=c(9,1,7,3,8,2,1,9), levels=yn)
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99),levels=yn)
t.a <- cptable(~tub|asia, values=c(5,95,1,99),levels=yn)
s <- cptable(~smoke, values=c(5,5), levels=yn)
l.s <- cptable(~lung|smoke, values=c(1,9,1,99), levels=yn)
b.s <- cptable(~bronc|smoke, values=c(6,4,3,7), levels=yn)
e.lt <- cptable(~either|lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
x.e <- cptable(~xray|either, values=c(98,2,5,95), levels=yn)
d.be <- cptable(~dysp|bronc:either, values=c(9,1,7,3,8,2,1,9), levels=yn)
gRain
library(gRain)
install.packages('RBGL')
install.packages('gRbase')
library(gRbase)
8000-(1383)-(650*3+700)
1200*4+3500
48%6
48%%6
48%/%6
for(i in 3:2017){}
for(i in 3:2017){
if(2017 %% i == 0){print i}
}
for(i in 3:2017){
if(2017 %% i == 0){i}
}
for(i in 3:2017){
if(2017 %% i == 0)(i)
}
for(i in 1:2017){
if(2017 %% i == 0){print i}
}
for(i in 1:2017){
if(2017 %% i == 0){print i}
}
i
2017 %% i == 0
print i
for(i in 1:2017){
if(2017 %% i == 0){print(i)}
}
for(i in 1:2017){
if(2017 %% i == 0){print(i)}
}
for(i in 1:2017){
if(2017 %% i == 0){print(i)}
}
n = 2018
for(i in 1:n){
if(n %% i == 0){print(i)}
}
n = 2016
for(i in 1:n){
if(n %% i == 0){print(i)}
}
n = 2019
for(i in 1:n){
if(n %% i == 0){print(i)}
}
n = 2020
for(i in 1:n){
if(n %% i == 0){print(i)}
}
install.packages("phyloseq")
install.packages("esophagus")
install.packages("phyloseq")
install.packages("phyloseq", type = "source")
bioLite("phyloseq", type = "source")
biocLite("phyloseq", type = "source")
library(phyloseq)
source("https://bioconductor.org/biocLite.R")
install.packages("phyloseq", type = "source")
install.packages("phyloseq", https://bioconductor.org/biocLite.R)
install.packages("phyloseq", "https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
library("phyloseq")
library(ggplot2)
library(phyloseq)
?esoph
esoph
data.frame(esoph)
treering
fft
?fft
fft(treering)
plot(fft(treering))
zipftp = "ftp://thebeast.colorado.edu/pub/QIIME_DB_Public_Studies/study_1011_split_library_seqs_and_mapping.zip"
# First create a temporary directory in which to store the unpacked file(s)
# from the .zip
tmpdir = tempdir()
# Second create a temp file where you will put the .zip-file itself
temp = tempfile()
# Now download the file and unzip to tmpdir directory
download.file(zipftp, temp)
data(GlobalPatterns)
GlobalPatterns
library(scales)
library(ggplot2)
library(grid)
GlobalPatterns
zipftp = "ftp://thebeast.colorado.edu/pub/QIIME_DB_Public_Studies/study_1011_split_library_seqs_and_mapping.zip"
# First create a temporary directory in which to store the unpacked file(s)
# from the .zip
tmpdir = tempdir()
# Second create a temp file where you will put the .zip-file itself
temp = tempfile()
# Now download the file and unzip to tmpdir directory
download.file(zipftp, temp)
unzip(temp, exdir = tmpdir)
# Define the biom file-path
biom_file = file.path(tmpdir, list.files(tmpdir, pattern = ".biom"))
# Define the mapping file-path
map_file = file.path(tmpdir, list.files(tmpdir, pattern = "mapping"))
# Now import the .biom-formatted otu_table/taxonomyTable file.
biom_otu_tax = import_biom(biom_file, "greengenes")
# Add sample data to the dataset using merge
bmsd = import_qiime_sample_data(map_file)
# Remove the temperorary file and directory where you unpacked the zip files
unlink(temp)
unlink(tmpdir)
Bushman
zipftp = "ftp://thebeast.colorado.edu/pub/QIIME_DB_Public_Studies/study_1011_split_library_seqs_and_mapping.zip"
# First create a temporary directory in which to store the unpacked file(s)
# from the .zip
tmpdir = tempdir()
# Second create a temp file where you will put the .zip-file itself
temp = tempfile()
# Now download the file and unzip to tmpdir directory
download.file(zipftp, temp)
unzip(temp, exdir = tmpdir)
# Define the biom file-path
biom_file = file.path(tmpdir, list.files(tmpdir, pattern = ".biom"))
# Define the mapping file-path
map_file = file.path(tmpdir, list.files(tmpdir, pattern = "mapping"))
# Now import the .biom-formatted otu_table/taxonomyTable file.
biom_otu_tax = import_biom(biom_file, "greengenes")
# Add sample data to the dataset using merge
bmsd = import_qiime_sample_data(map_file)
# Remove the temperorary file and directory where you unpacked the zip files
unlink(temp)
unlink(tmpdir)
install.packages("Rphylip")
library(Rphylip)
read.dna
read.dna()
Rphylip
require(Rphylip)
require(ape)
?Rphylip::
?Rphylip
??Rphylip
??ape
library(ape)
install.packages("nlme")
library(nlme)
library(ape)
read.dna("C:\\Users\\avanplan\\Downloads\\primates.dna")
Rdnam1
library(Rphylip)
plot(midpoint(Rdnaml(read.dna("C:\\Users\\avanplan\\Downloads\\primates.dna")))
)
library(phangorn)
plot(midpoint(Rdnaml(read.dna("C:\\Users\\avanplan\\Downloads\\primates.dna"))))
?Rdnaml
plot(midpoint(Rdnaml(read.dna("C:\\Users\\avanplan\\Downloads\\primates.dna", path = NULL))))
plot(midpoint(Rdnaml(read.dna("C:\\Users\\avanplan\\Downloads\\primates.dna"), path = NULL)))
read.dna("C:\\Users\\avanplan\\Downloads\\primates.dna")
x = read.dna("C:\\Users\\avanplan\\Downloads\\primates.dna")
x
class(x)
x
data(x)
data.frame(x)
as.dendrogram(x)
x
install.packages("data.tree")
install.packages("ape")
install.packages("phangorn")
install.packages("seqinr")
library(ape)
library(phangorn)
library(seqinr)
install.packages("ape")
install.packages("phangorn")
install.packages("phangorn")
library(ape)
library(phangorn)
library(seqinr)
phyDat(x)
dm
modelTest(phyDat(x))
plot(upgma(dist.ml(phyDat(x))), main = "UPGMA")
x
# Alex Van Plantinga
# learning about computational phylogenetics
# throwback to my Philip class project at Rutgers
# http://www.molecularecologist.com/2016/02/quick-and-dirty-tree-building-in-r/
# example data sets
# http://evolution.gs.washington.edu/book/datasets.html
x = read.dna("C:\\Users\\avanplan\\Downloads\\primates.dna")
library(ape)
library(phangorn)
library(seqinr)
plot(upgma(dist.ml(phyDat(x))), main = "UPGMA")
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(query2$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
dengueseq <- getncbiseq("NC_001477")
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error"))) {
queryname <- "query2"
thequery <- paste("AC=", accession, sep="")
query2 <- query(queryname, thequery)
# see if a sequence was retrieved:
seq <- getSequence(query2$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
GC(dengueseq)
count(dengueseq, 1)
?randu()
rand(100)
randu(100)
randu
sample(1:10, 5, replace = T)
sample(1:10, 5, replace = F)
sample(1:5, 8, replace = F)
sample(1:10, 5, replace = F)
sample(1:10, 5, replace = T)
class(sample(1:10, 5, replace = T))
sample(1:10, 5, replace = T)[1]
sample(1:10, 5, replace = T)
sample(1:10, 5, replace = T)
x = sample(1:10, 5, replace = T)
x
x
x
x
x
x
x[1]
x[2]
library(spatstat)
H <- hextess(square(5), 0.2)
plot(H)
install.packages("spatstat")
library(spatstat)
H <- hextess(square(5), 0.2)
plot(H)
library(spatstat)
H <- hextess(square(5), 0.2)
plot(H)
shear <- matrix(c(1,0,0.6,1), 2, 2)
sH <- affine(H, shear)
plot(sH)
shear <- matrix(c(1,0,0.6,1), 2, 2)
sH <- affine(H, shear)
plot(sH, col = "cyan")
shear
shear <- matrix(c(1,0,0,1), 2, 2)
sH <- affine(H, shear)
plot(sH, col = "cyan")
shear <- matrix(c(1,0,0.6,1), 2, 2)
sH <- affine(H, shear)
plot(sH, col = "cyan")
shear <- matrix(c(1,0.6,0,1), 2, 2)
sH <- affine(H, shear)
plot(sH, col = "pink")
shear <- matrix(c(1,0,0.6,1), 2, 2)
sH <- affine(H, shear)
plot(sH, col = "cyan")
shear <- matrix(c(1,0.6,0,1), 2, 2)
sH <- affine(H, shear)
plot(sH, col = "pink", add = T)
shear
shear <- matrix(c(1,0,0.6,1), 2, 2)
sH <- affine(H, shear)
plot(sH, col = "cyan")
shear <- matrix(c(0.6,1,0,1), 2, 2)
sH <- affine(H, shear)
plot(sH, col = "pink", add = T)
shear <- matrix(c(1,0,0.6,1), 2, 2)
sH <- affine(H, shear)
plot(sH, col = "cyan")
shear <- matrix(c(0.6,1,0,0.6), 2, 2)
sH <- affine(H, shear)
plot(sH, col = "pink", add = T)
shear <- matrix(c(1,0,0.6,1), 2, 2)
sH <- affine(H, shear)
plot(sH, col = "cyan")
shear <- matrix(c(0.6,1,0,1), 2, 2)
sH <- affine(H, shear)
plot(sH, col = "pink", add = T)
x = read.dna("C:\\Users\\avanplan\\Downloads\\primates.dna")
library(ape)
library(phangorn)
library(seqinr)
x = read.dna("C:\\Users\\avanplan\\Downloads\\primates.dna")
library(ape)
library(phangorn)
library(seqinr)
plot(upgma(dist.ml(phyDat(x))), main = "UPGMA")
library(base)
library(bnlearn)
library("rgdal")
library(lubridate)
library("caTools") # make gifs with write.gif() function or use ImageMagick software
library(purrr) # for mapping over a function
library(magick)
setwd("C:\\Users\\avanplan\\Dropbox\\Personal projects\\data sets\\DC open data\\DC crime 2017")
crimes = readOGR("Crime_Incidents_in_2017.shp")
streets = readOGR("C:\\Users\\avanplan\\Dropbox\\Personal projects\\data sets\\DC open data\\Street_Centerlines\\Street_Centerlines.shp")
blocks = readOGR("C:\\Users\\avanplan\\Dropbox\\Personal projects\\data sets\\DC open data\\Block_Centroids\\Block_Centroids.shp")
boundaries = readOGR("C:\\Users\\avanplan\\Dropbox\\Personal projects\\data sets\\boundaries\\cb_2016_us_state_500k.shp")
traffic = readOGF("C:\Users\avanplan\Dropbox\Personal projects\data sets\DC open data\2007_Traffic_Volume\2007_Traffic_Volume.shp")
traffic = readOGF("C:\\Users\\avanplan\Dropbox\\Personal projects\\data sets\\DC open data\\2007_Traffic_Volume\\2007_Traffic_Volume.shp")
traffic = readOGF("C:\\Users\\avanplan\Dropbox\\Personal projects\\data sets\\DC open data\\2007_Traffic_Volume\\2007_Traffic_Volume.shp")
traffic = readOGR("C:\\Users\\avanplan\Dropbox\\Personal projects\\data sets\\DC open data\\2007_Traffic_Volume\\2007_Traffic_Volume.shp")
traffic = readOGR("C:\\Users\\avanplan\\Dropbox\\Personal projects\\data sets\\DC open data\\2007_Traffic_Volume\\2007_Traffic_Volume.shp")
plot(traffic)
View(data.frame(traffic))
# Alex Van Plantinga
# March 2018
# The goal here is
# that for each week of 2017, make a new street map of crime
# where streets are color coded for the weekly crime rate
# combine the maps sequentially into a gif.
# Merge block centroids and crime stats from shape files into dfs
# by the BLOCK column (data conserved?)
# Merge streets and blocks by STREETSEGI column (data conserved?)
library(base)
library(bnlearn)
library("rgdal")
library(lubridate)
library("caTools") # make gifs with write.gif() function or use ImageMagick software
library(purrr) # for mapping over a function
library(magick)
setwd("C:\\Users\\avanplan\\Dropbox\\Personal projects\\data sets\\DC open data\\DC crime 2017")
crimes = readOGR("Crime_Incidents_in_2017.shp")
streets = readOGR("C:\\Users\\avanplan\\Dropbox\\Personal projects\\data sets\\DC open data\\Street_Centerlines\\Street_Centerlines.shp")
blocks = readOGR("C:\\Users\\avanplan\\Dropbox\\Personal projects\\data sets\\DC open data\\Block_Centroids\\Block_Centroids.shp")
boundaries = readOGR("C:\\Users\\avanplan\\Dropbox\\Personal projects\\data sets\\boundaries\\cb_2016_us_state_500k.shp")
# this new color column gets repopulated with a
# loop depending on monthly crime rate
streets$color  = NA
df.crimes = data.frame(crimes)
df.crimes$week = week(df.crimes$REPORT_DAT)
df.crimes$month = month(df.crimes$REPORT_DAT)
df.streets = data.frame(streets)
df.blocks = data.frame(blocks)
df.blocks$BLOCK = df.blocks$BLOCKNAME
blocks.crimes = merge(df.blocks, df.crimes, "BLOCK")
blocks.crimes.streets = merge(blocks.crimes, streets, "STREETSEGI")
bcs = blocks.crimes.streets
bcs$week = week(bcs$REPORT_DAT)
collist = c("pink","purple", "deeppink", "red", "red4", "black")
colfunc<-colorRampPalette(collist)
streets$color = colfunc(nrow(streets))
plot(streets, col = streets$color)
plot(streets.df)
mymonths <- c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec")
for (i in 1:12){
a = NA
b = NA
c = NA
d = NA
e = NA
df.d = NA
df.streets$color = NA
streets$color = NA
a = df.crimes[which(df.crimes$month == i),]
b = merge(a, df.blocks, "BLOCK")
b$counter = 1
c = aggregate(b$counter ~ b$BLOCK, FUN = sum)
c$color = NA
cfunc = colfunc(max(c$`b$counter`))
for(j in 1:nrow(c)){
c$color[j] = cfunc[c$`b$counter`[j]]
}
c$BLOCK = c$`b$BLOCK`
#c$STREETSEGI = NA
d = merge(c, df.blocks, "BLOCK")
df.d = data.frame(d$STREETSEGI, d$color)
colnames(df.d) = c("STREETSEGI", "color")
df.d = df.d[which(!duplicated(df.d$STREETSEGI)),]
df.d = merge(df.streets, df.d, "STREETSEGI", all = T)
df.d = df.d[1:nrow(df.streets),]
df.streets$color = as.character(df.d$color.y)
df.streets$color[which(is.na(df.streets$color))] = "gray"
# make default no crime color
streets$color = df.streets$color
id = i
if(id <= 9){id = paste(0,i, sep = "")}
setwd("C:\\Users\\avanplan\\Documents\\GitHub\\DC-crime-map-R\\gif")
jpeg(paste(id,"DCcrimeRoads.jpg", sep = ""), width = 800, height = 700)
plot(boundaries, ylim = c(38.79323, 38.99526), xlim = c(-77.11664, -76.90953))
plot(streets, col = streets$color, ylim = c(38.79323, 38.99526), xlim = c(-77.11664, -76.90953), add = TRUE)
text(x = -76.9, y = 38.95, mymonths[i], cex = 4)
dev.off()
}
list.files(path = "C:\\Users\\avanplan\\Documents\\GitHub\\DC-crime-map-R\\gif", pattern = "*.jpg", full.names = T) %>%
map(image_read) %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=2) %>% # animates, can opt for number of loops
image_write("dc_crime_roads_months_gif.gif") # write to current dir
collist = c("pink", "red4", "black")
colfunc<-colorRampPalette(collist)
streets$color = colfunc(nrow(streets))
plot(streets, col = streets$color)
plot(streets.df)
mymonths <- c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec")
for (i in 1:12){
a = NA
b = NA
c = NA
d = NA
e = NA
df.d = NA
df.streets$color = NA
streets$color = NA
a = df.crimes[which(df.crimes$month == i),]
b = merge(a, df.blocks, "BLOCK")
b$counter = 1
c = aggregate(b$counter ~ b$BLOCK, FUN = sum)
c$color = NA
cfunc = colfunc(max(c$`b$counter`))
for(j in 1:nrow(c)){
c$color[j] = cfunc[c$`b$counter`[j]]
}
c$BLOCK = c$`b$BLOCK`
#c$STREETSEGI = NA
d = merge(c, df.blocks, "BLOCK")
df.d = data.frame(d$STREETSEGI, d$color)
colnames(df.d) = c("STREETSEGI", "color")
df.d = df.d[which(!duplicated(df.d$STREETSEGI)),]
df.d = merge(df.streets, df.d, "STREETSEGI", all = T)
df.d = df.d[1:nrow(df.streets),]
df.streets$color = as.character(df.d$color.y)
df.streets$color[which(is.na(df.streets$color))] = "gray"
# make default no crime color
streets$color = df.streets$color
id = i
if(id <= 9){id = paste(0,i, sep = "")}
setwd("C:\\Users\\avanplan\\Documents\\GitHub\\DC-crime-map-R\\gif")
jpeg(paste(id,"DCcrimeRoads.jpg", sep = ""), width = 800, height = 700)
plot(boundaries, ylim = c(38.79323, 38.99526), xlim = c(-77.11664, -76.90953))
plot(streets, col = streets$color, ylim = c(38.79323, 38.99526), xlim = c(-77.11664, -76.90953), add = TRUE)
text(x = -76.9, y = 38.95, mymonths[i], cex = 4)
dev.off()
}
list.files(path = "C:\\Users\\avanplan\\Documents\\GitHub\\DC-crime-map-R\\gif", pattern = "*.jpg", full.names = T) %>%
map(image_read) %>% # reads each path file
image_join() %>% # joins image
image_animate(fps=2) %>% # animates, can opt for number of loops
image_write("dc_crime_roads_months_gif.gif") # write to current dir
